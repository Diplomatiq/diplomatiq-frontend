/* tslint:disable */
/* eslint-disable */
/**
 * Diplomatiq API
 * This is the OpenAPI documentation of the Diplomatiq API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    DiplomatiqApiError,
    DiplomatiqApiErrorFromJSON,
    DiplomatiqApiErrorToJSON,
    GetSessionV1Request,
    GetSessionV1RequestFromJSON,
    GetSessionV1RequestToJSON,
    GetSessionV1Response,
    GetSessionV1ResponseFromJSON,
    GetSessionV1ResponseToJSON,
} from '../models';

export interface DeviceMethodsApiGetSessionV1Request {
    getSessionV1Request: GetSessionV1Request;
}

/**
 * no description
 */
export class DeviceMethodsApi extends runtime.BaseAPI {

    /**
     * Creates a session for a device specified by the session token, and returns its encrypted ID. If the caller device has a session which is still valid for at least 1 minute, it returns the old session\'s encrypted ID.
     * Get a session for calling API methods
     */
    async getSessionV1Raw(requestParameters: DeviceMethodsApiGetSessionV1Request): Promise<runtime.ApiResponse<GetSessionV1Response>> {
        if (requestParameters.getSessionV1Request === null || requestParameters.getSessionV1Request === undefined) {
            throw new runtime.RequiredError('getSessionV1Request','Required parameter requestParameters.getSessionV1Request was null or undefined when calling getSessionV1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["ClientId"] = this.configuration.apiKey("ClientId"); // ClientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["DeviceId"] = this.configuration.apiKey("DeviceId"); // DeviceId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Instant"] = this.configuration.apiKey("Instant"); // Instant authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["SignedHeaders"] = this.configuration.apiKey("SignedHeaders"); // SignedHeaders authentication
        }

        const response = await this.request({
            path: `/get-session-v1`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetSessionV1RequestToJSON(requestParameters.getSessionV1Request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSessionV1ResponseFromJSON(jsonValue));
    }

    /**
     * Creates a session for a device specified by the session token, and returns its encrypted ID. If the caller device has a session which is still valid for at least 1 minute, it returns the old session\'s encrypted ID.
     * Get a session for calling API methods
     */
    async getSessionV1(requestParameters: DeviceMethodsApiGetSessionV1Request): Promise<GetSessionV1Response> {
        const response = await this.getSessionV1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Logs out the user on the current client device. Deregisters the client device and its session, and revokes request signing and authentication credentials for that client device.
     * Log out from a device
     */
    async logoutV1Raw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["ClientId"] = this.configuration.apiKey("ClientId"); // ClientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["DeviceId"] = this.configuration.apiKey("DeviceId"); // DeviceId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Instant"] = this.configuration.apiKey("Instant"); // Instant authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["SignedHeaders"] = this.configuration.apiKey("SignedHeaders"); // SignedHeaders authentication
        }

        const response = await this.request({
            path: `/logout-v1`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Logs out the user on the current client device. Deregisters the client device and its session, and revokes request signing and authentication credentials for that client device.
     * Log out from a device
     */
    async logoutV1(): Promise<void> {
        await this.logoutV1Raw();
    }

}
