/* tslint:disable */
/* eslint-disable */
/**
 * Diplomatiq API
 * This is the OpenAPI documentation of the Diplomatiq API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ChangePasswordV1Request,
    ChangePasswordV1RequestFromJSON,
    ChangePasswordV1RequestToJSON,
    DiplomatiqApiError,
    DiplomatiqApiErrorFromJSON,
    DiplomatiqApiErrorToJSON,
    ElevatePasswordElevatedSessionCompleteV1Request,
    ElevatePasswordElevatedSessionCompleteV1RequestFromJSON,
    ElevatePasswordElevatedSessionCompleteV1RequestToJSON,
} from '../models';

export interface SessionMethodsPasswordElevatedSessionApiChangePasswordV1Request {
    changePasswordV1Request: ChangePasswordV1Request;
}

export interface SessionMethodsPasswordElevatedSessionApiElevatePasswordElevatedSessionCompleteV1Request {
    elevatePasswordElevatedSessionCompleteV1Request: ElevatePasswordElevatedSessionCompleteV1Request;
}

/**
 * no description
 */
export class SessionMethodsPasswordElevatedSessionApi extends runtime.BaseAPI {

    /**
     * Changes the user\'s password to be able to authenticate with the new one.
     * Change the user\'s password
     */
    async changePasswordV1Raw(requestParameters: SessionMethodsPasswordElevatedSessionApiChangePasswordV1Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.changePasswordV1Request === null || requestParameters.changePasswordV1Request === undefined) {
            throw new runtime.RequiredError('changePasswordV1Request','Required parameter requestParameters.changePasswordV1Request was null or undefined when calling changePasswordV1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["ClientId"] = this.configuration.apiKey("ClientId"); // ClientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["DeviceId"] = this.configuration.apiKey("DeviceId"); // DeviceId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Instant"] = this.configuration.apiKey("Instant"); // Instant authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["SessionId"] = this.configuration.apiKey("SessionId"); // SessionId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["SignedHeaders"] = this.configuration.apiKey("SignedHeaders"); // SignedHeaders authentication
        }

        const response = await this.request({
            path: `/change-password-v1`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChangePasswordV1RequestToJSON(requestParameters.changePasswordV1Request),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Changes the user\'s password to be able to authenticate with the new one.
     * Change the user\'s password
     */
    async changePasswordV1(requestParameters: SessionMethodsPasswordElevatedSessionApiChangePasswordV1Request): Promise<void> {
        await this.changePasswordV1Raw(requestParameters);
    }

    /**
     * Verifies a multi-factor authentication code previously sent to the user\'s email address. If successful, the current session was elevated to `MultiFactorElevatedSession` assurance level.
     * Complete session elevation to MultiFactorElevatedSession assurance level
     */
    async elevatePasswordElevatedSessionCompleteV1Raw(requestParameters: SessionMethodsPasswordElevatedSessionApiElevatePasswordElevatedSessionCompleteV1Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.elevatePasswordElevatedSessionCompleteV1Request === null || requestParameters.elevatePasswordElevatedSessionCompleteV1Request === undefined) {
            throw new runtime.RequiredError('elevatePasswordElevatedSessionCompleteV1Request','Required parameter requestParameters.elevatePasswordElevatedSessionCompleteV1Request was null or undefined when calling elevatePasswordElevatedSessionCompleteV1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["ClientId"] = this.configuration.apiKey("ClientId"); // ClientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["DeviceId"] = this.configuration.apiKey("DeviceId"); // DeviceId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Instant"] = this.configuration.apiKey("Instant"); // Instant authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["SessionId"] = this.configuration.apiKey("SessionId"); // SessionId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["SignedHeaders"] = this.configuration.apiKey("SignedHeaders"); // SignedHeaders authentication
        }

        const response = await this.request({
            path: `/elevate-password-elevated-session-complete-v1`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ElevatePasswordElevatedSessionCompleteV1RequestToJSON(requestParameters.elevatePasswordElevatedSessionCompleteV1Request),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Verifies a multi-factor authentication code previously sent to the user\'s email address. If successful, the current session was elevated to `MultiFactorElevatedSession` assurance level.
     * Complete session elevation to MultiFactorElevatedSession assurance level
     */
    async elevatePasswordElevatedSessionCompleteV1(requestParameters: SessionMethodsPasswordElevatedSessionApiElevatePasswordElevatedSessionCompleteV1Request): Promise<void> {
        await this.elevatePasswordElevatedSessionCompleteV1Raw(requestParameters);
    }

    /**
     * Sends an email to the email address of the currently authenticated user with a multi-factor authentication code.
     * Initiate session elevation to MultiFactorElevatedSession assurance level
     */
    async elevatePasswordElevatedSessionInitV1Raw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["ClientId"] = this.configuration.apiKey("ClientId"); // ClientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["DeviceId"] = this.configuration.apiKey("DeviceId"); // DeviceId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Instant"] = this.configuration.apiKey("Instant"); // Instant authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["SessionId"] = this.configuration.apiKey("SessionId"); // SessionId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["SignedHeaders"] = this.configuration.apiKey("SignedHeaders"); // SignedHeaders authentication
        }

        const response = await this.request({
            path: `/elevate-password-elevated-session-init-v1`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sends an email to the email address of the currently authenticated user with a multi-factor authentication code.
     * Initiate session elevation to MultiFactorElevatedSession assurance level
     */
    async elevatePasswordElevatedSessionInitV1(): Promise<void> {
        await this.elevatePasswordElevatedSessionInitV1Raw();
    }

}
