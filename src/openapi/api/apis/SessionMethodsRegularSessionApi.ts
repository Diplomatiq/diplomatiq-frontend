/* tslint:disable */
/* eslint-disable */
/**
 * Diplomatiq API
 * This is the OpenAPI documentation of the Diplomatiq API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ApplyConferenceV1Request,
    ApplyConferenceV1RequestFromJSON,
    ApplyConferenceV1RequestToJSON,
    CommitteeWithSeatsWithDelegate,
    CommitteeWithSeatsWithDelegateFromJSON,
    CommitteeWithSeatsWithDelegateToJSON,
    DiplomatiqApiError,
    DiplomatiqApiErrorFromJSON,
    DiplomatiqApiErrorToJSON,
    ElevateRegularSessionCompleteV1Request,
    ElevateRegularSessionCompleteV1RequestFromJSON,
    ElevateRegularSessionCompleteV1RequestToJSON,
    ElevateRegularSessionInitV1Response,
    ElevateRegularSessionInitV1ResponseFromJSON,
    ElevateRegularSessionInitV1ResponseToJSON,
    ExploreConferencesV1Response,
    ExploreConferencesV1ResponseFromJSON,
    ExploreConferencesV1ResponseToJSON,
    GetMyConferencesV1Response,
    GetMyConferencesV1ResponseFromJSON,
    GetMyConferencesV1ResponseToJSON,
    GetMyOrganizedConferencesV1Response,
    GetMyOrganizedConferencesV1ResponseFromJSON,
    GetMyOrganizedConferencesV1ResponseToJSON,
    GetUserIdentityV1Response,
    GetUserIdentityV1ResponseFromJSON,
    GetUserIdentityV1ResponseToJSON,
    OrganizeConferenceV1Request,
    OrganizeConferenceV1RequestFromJSON,
    OrganizeConferenceV1RequestToJSON,
} from '../models';

export interface SessionMethodsRegularSessionApiApplyConferenceV1Request {
    applyConferenceV1Request: ApplyConferenceV1Request;
}

export interface SessionMethodsRegularSessionApiElevateRegularSessionCompleteV1Request {
    elevateRegularSessionCompleteV1Request: ElevateRegularSessionCompleteV1Request;
}

export interface SessionMethodsRegularSessionApiGetCountryMatrixV1Request {
    conferenceId: string;
}

export interface SessionMethodsRegularSessionApiGetMyConferencesV1Request {
    includePast: boolean;
}

export interface SessionMethodsRegularSessionApiGetMyOrganizedConferencesV1Request {
    includePast: boolean;
}

export interface SessionMethodsRegularSessionApiOrganizeConferenceV1Request {
    organizeConferenceV1Request: OrganizeConferenceV1Request;
}

/**
 * no description
 */
export class SessionMethodsRegularSessionApi extends runtime.BaseAPI {

    /**
     * Registers a user application to the specified committee place of a conference.
     * Apply to a conference, to the specified committee place
     */
    async applyConferenceV1Raw(requestParameters: SessionMethodsRegularSessionApiApplyConferenceV1Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.applyConferenceV1Request === null || requestParameters.applyConferenceV1Request === undefined) {
            throw new runtime.RequiredError('applyConferenceV1Request','Required parameter requestParameters.applyConferenceV1Request was null or undefined when calling applyConferenceV1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["ClientId"] = this.configuration.apiKey("ClientId"); // ClientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["DeviceId"] = this.configuration.apiKey("DeviceId"); // DeviceId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Instant"] = this.configuration.apiKey("Instant"); // Instant authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["SessionId"] = this.configuration.apiKey("SessionId"); // SessionId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["SignedHeaders"] = this.configuration.apiKey("SignedHeaders"); // SignedHeaders authentication
        }

        const response = await this.request({
            path: `/apply-conference-v1`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplyConferenceV1RequestToJSON(requestParameters.applyConferenceV1Request),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Registers a user application to the specified committee place of a conference.
     * Apply to a conference, to the specified committee place
     */
    async applyConferenceV1(requestParameters: SessionMethodsRegularSessionApiApplyConferenceV1Request): Promise<void> {
        await this.applyConferenceV1Raw(requestParameters);
    }

    /**
     * Completes an authentication flow for the given email address, based on the Secure Remote Password protocol (version 6a). If successful, the current session was elevated to `PasswordElevatedSession` assurance level.
     * Complete session elevation to PasswordElevatedSession assurance level
     */
    async elevateRegularSessionCompleteV1Raw(requestParameters: SessionMethodsRegularSessionApiElevateRegularSessionCompleteV1Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.elevateRegularSessionCompleteV1Request === null || requestParameters.elevateRegularSessionCompleteV1Request === undefined) {
            throw new runtime.RequiredError('elevateRegularSessionCompleteV1Request','Required parameter requestParameters.elevateRegularSessionCompleteV1Request was null or undefined when calling elevateRegularSessionCompleteV1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["ClientId"] = this.configuration.apiKey("ClientId"); // ClientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["DeviceId"] = this.configuration.apiKey("DeviceId"); // DeviceId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Instant"] = this.configuration.apiKey("Instant"); // Instant authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["SessionId"] = this.configuration.apiKey("SessionId"); // SessionId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["SignedHeaders"] = this.configuration.apiKey("SignedHeaders"); // SignedHeaders authentication
        }

        const response = await this.request({
            path: `/elevate-regular-session-complete-v1`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ElevateRegularSessionCompleteV1RequestToJSON(requestParameters.elevateRegularSessionCompleteV1Request),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Completes an authentication flow for the given email address, based on the Secure Remote Password protocol (version 6a). If successful, the current session was elevated to `PasswordElevatedSession` assurance level.
     * Complete session elevation to PasswordElevatedSession assurance level
     */
    async elevateRegularSessionCompleteV1(requestParameters: SessionMethodsRegularSessionApiElevateRegularSessionCompleteV1Request): Promise<void> {
        await this.elevateRegularSessionCompleteV1Raw(requestParameters);
    }

    /**
     * Initiates the authentication flow for the current user, based on the Secure Remote Password protocol (version 6a).
     * Initiate session elevation to PasswordElevatedSession assurance level
     */
    async elevateRegularSessionInitV1Raw(): Promise<runtime.ApiResponse<ElevateRegularSessionInitV1Response>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["ClientId"] = this.configuration.apiKey("ClientId"); // ClientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["DeviceId"] = this.configuration.apiKey("DeviceId"); // DeviceId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Instant"] = this.configuration.apiKey("Instant"); // Instant authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["SessionId"] = this.configuration.apiKey("SessionId"); // SessionId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["SignedHeaders"] = this.configuration.apiKey("SignedHeaders"); // SignedHeaders authentication
        }

        const response = await this.request({
            path: `/elevate-regular-session-init-v1`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ElevateRegularSessionInitV1ResponseFromJSON(jsonValue));
    }

    /**
     * Initiates the authentication flow for the current user, based on the Secure Remote Password protocol (version 6a).
     * Initiate session elevation to PasswordElevatedSession assurance level
     */
    async elevateRegularSessionInitV1(): Promise<ElevateRegularSessionInitV1Response> {
        const response = await this.elevateRegularSessionInitV1Raw();
        return await response.value();
    }

    /**
     * Returns such conferences, which are in the future, and has vacant places.
     * Return conferences which can be applied on
     */
    async exploreConferencesV1Raw(): Promise<runtime.ApiResponse<Array<ExploreConferencesV1Response>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["ClientId"] = this.configuration.apiKey("ClientId"); // ClientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["DeviceId"] = this.configuration.apiKey("DeviceId"); // DeviceId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Instant"] = this.configuration.apiKey("Instant"); // Instant authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["SessionId"] = this.configuration.apiKey("SessionId"); // SessionId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["SignedHeaders"] = this.configuration.apiKey("SignedHeaders"); // SignedHeaders authentication
        }

        const response = await this.request({
            path: `/explore-conferences-v1`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExploreConferencesV1ResponseFromJSON));
    }

    /**
     * Returns such conferences, which are in the future, and has vacant places.
     * Return conferences which can be applied on
     */
    async exploreConferencesV1(): Promise<Array<ExploreConferencesV1Response>> {
        const response = await this.exploreConferencesV1Raw();
        return await response.value();
    }

    /**
     * Returns the country matrix (committee-country assignments) of a conference organized by the user.
     * Get the country matrix of a conference organized by the user
     */
    async getCountryMatrixV1Raw(requestParameters: SessionMethodsRegularSessionApiGetCountryMatrixV1Request): Promise<runtime.ApiResponse<Array<CommitteeWithSeatsWithDelegate>>> {
        if (requestParameters.conferenceId === null || requestParameters.conferenceId === undefined) {
            throw new runtime.RequiredError('conferenceId','Required parameter requestParameters.conferenceId was null or undefined when calling getCountryMatrixV1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.conferenceId !== undefined) {
            queryParameters['conferenceId'] = requestParameters.conferenceId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["ClientId"] = this.configuration.apiKey("ClientId"); // ClientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["DeviceId"] = this.configuration.apiKey("DeviceId"); // DeviceId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Instant"] = this.configuration.apiKey("Instant"); // Instant authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["SessionId"] = this.configuration.apiKey("SessionId"); // SessionId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["SignedHeaders"] = this.configuration.apiKey("SignedHeaders"); // SignedHeaders authentication
        }

        const response = await this.request({
            path: `/get-country-matrix-v1`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CommitteeWithSeatsWithDelegateFromJSON));
    }

    /**
     * Returns the country matrix (committee-country assignments) of a conference organized by the user.
     * Get the country matrix of a conference organized by the user
     */
    async getCountryMatrixV1(requestParameters: SessionMethodsRegularSessionApiGetCountryMatrixV1Request): Promise<Array<CommitteeWithSeatsWithDelegate>> {
        const response = await this.getCountryMatrixV1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Returns the ids of conferences which the user participates in (not organizes).
     * Get the conferences which the user participates in
     */
    async getMyConferencesV1Raw(requestParameters: SessionMethodsRegularSessionApiGetMyConferencesV1Request): Promise<runtime.ApiResponse<Array<GetMyConferencesV1Response>>> {
        if (requestParameters.includePast === null || requestParameters.includePast === undefined) {
            throw new runtime.RequiredError('includePast','Required parameter requestParameters.includePast was null or undefined when calling getMyConferencesV1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.includePast !== undefined) {
            queryParameters['includePast'] = requestParameters.includePast;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["ClientId"] = this.configuration.apiKey("ClientId"); // ClientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["DeviceId"] = this.configuration.apiKey("DeviceId"); // DeviceId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Instant"] = this.configuration.apiKey("Instant"); // Instant authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["SessionId"] = this.configuration.apiKey("SessionId"); // SessionId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["SignedHeaders"] = this.configuration.apiKey("SignedHeaders"); // SignedHeaders authentication
        }

        const response = await this.request({
            path: `/get-my-conferences-v1`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetMyConferencesV1ResponseFromJSON));
    }

    /**
     * Returns the ids of conferences which the user participates in (not organizes).
     * Get the conferences which the user participates in
     */
    async getMyConferencesV1(requestParameters: SessionMethodsRegularSessionApiGetMyConferencesV1Request): Promise<Array<GetMyConferencesV1Response>> {
        const response = await this.getMyConferencesV1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Returns the ids of conferences which the user organizes (not participates in).
     * Get the conferences which are organized by the user
     */
    async getMyOrganizedConferencesV1Raw(requestParameters: SessionMethodsRegularSessionApiGetMyOrganizedConferencesV1Request): Promise<runtime.ApiResponse<Array<GetMyOrganizedConferencesV1Response>>> {
        if (requestParameters.includePast === null || requestParameters.includePast === undefined) {
            throw new runtime.RequiredError('includePast','Required parameter requestParameters.includePast was null or undefined when calling getMyOrganizedConferencesV1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.includePast !== undefined) {
            queryParameters['includePast'] = requestParameters.includePast;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["ClientId"] = this.configuration.apiKey("ClientId"); // ClientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["DeviceId"] = this.configuration.apiKey("DeviceId"); // DeviceId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Instant"] = this.configuration.apiKey("Instant"); // Instant authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["SessionId"] = this.configuration.apiKey("SessionId"); // SessionId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["SignedHeaders"] = this.configuration.apiKey("SignedHeaders"); // SignedHeaders authentication
        }

        const response = await this.request({
            path: `/get-my-organized-conferences-v1`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetMyOrganizedConferencesV1ResponseFromJSON));
    }

    /**
     * Returns the ids of conferences which the user organizes (not participates in).
     * Get the conferences which are organized by the user
     */
    async getMyOrganizedConferencesV1(requestParameters: SessionMethodsRegularSessionApiGetMyOrganizedConferencesV1Request): Promise<Array<GetMyOrganizedConferencesV1Response>> {
        const response = await this.getMyOrganizedConferencesV1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Returns the identity of the authenticated user
     * Get the identity of the user
     */
    async getUserIdentityV1Raw(): Promise<runtime.ApiResponse<GetUserIdentityV1Response>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["ClientId"] = this.configuration.apiKey("ClientId"); // ClientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["DeviceId"] = this.configuration.apiKey("DeviceId"); // DeviceId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Instant"] = this.configuration.apiKey("Instant"); // Instant authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["SessionId"] = this.configuration.apiKey("SessionId"); // SessionId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["SignedHeaders"] = this.configuration.apiKey("SignedHeaders"); // SignedHeaders authentication
        }

        const response = await this.request({
            path: `/get-user-identity-v1`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserIdentityV1ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the identity of the authenticated user
     * Get the identity of the user
     */
    async getUserIdentityV1(): Promise<GetUserIdentityV1Response> {
        const response = await this.getUserIdentityV1Raw();
        return await response.value();
    }

    /**
     * Creates a conference with the given committees and the corresponding committee seats, which delegates can apply on.
     * Create a conference in the system with committees and commitee seats
     */
    async organizeConferenceV1Raw(requestParameters: SessionMethodsRegularSessionApiOrganizeConferenceV1Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organizeConferenceV1Request === null || requestParameters.organizeConferenceV1Request === undefined) {
            throw new runtime.RequiredError('organizeConferenceV1Request','Required parameter requestParameters.organizeConferenceV1Request was null or undefined when calling organizeConferenceV1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["ClientId"] = this.configuration.apiKey("ClientId"); // ClientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["DeviceId"] = this.configuration.apiKey("DeviceId"); // DeviceId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Instant"] = this.configuration.apiKey("Instant"); // Instant authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["SessionId"] = this.configuration.apiKey("SessionId"); // SessionId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["SignedHeaders"] = this.configuration.apiKey("SignedHeaders"); // SignedHeaders authentication
        }

        const response = await this.request({
            path: `/organize-conference-v1`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganizeConferenceV1RequestToJSON(requestParameters.organizeConferenceV1Request),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates a conference with the given committees and the corresponding committee seats, which delegates can apply on.
     * Create a conference in the system with committees and commitee seats
     */
    async organizeConferenceV1(requestParameters: SessionMethodsRegularSessionApiOrganizeConferenceV1Request): Promise<void> {
        await this.organizeConferenceV1Raw(requestParameters);
    }

}
