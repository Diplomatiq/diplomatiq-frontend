/* tslint:disable */
/* eslint-disable */
/**
 * Diplomatiq API
 * This is the OpenAPI documentation of the Diplomatiq API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    DiplomatiqApiError,
    DiplomatiqApiErrorFromJSON,
    DiplomatiqApiErrorToJSON,
    ElevateRegularSessionCompleteV1Request,
    ElevateRegularSessionCompleteV1RequestFromJSON,
    ElevateRegularSessionCompleteV1RequestToJSON,
    ElevateRegularSessionInitV1Response,
    ElevateRegularSessionInitV1ResponseFromJSON,
    ElevateRegularSessionInitV1ResponseToJSON,
} from '../models';

export interface SessionMethodsRegularSessionApiElevateRegularSessionCompleteV1Request {
    elevateRegularSessionCompleteV1Request: ElevateRegularSessionCompleteV1Request;
}

/**
 * no description
 */
export class SessionMethodsRegularSessionApi extends runtime.BaseAPI {

    /**
     * Completes an authentication flow for the given email address, based on the Secure Remote Password protocol (version 6a). If successful, the current session was elevated to `PasswordElevatedSession` assurance level.
     * Complete session elevation to PasswordElevatedSession assurance level
     */
    async elevateRegularSessionCompleteV1Raw(requestParameters: SessionMethodsRegularSessionApiElevateRegularSessionCompleteV1Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.elevateRegularSessionCompleteV1Request === null || requestParameters.elevateRegularSessionCompleteV1Request === undefined) {
            throw new runtime.RequiredError('elevateRegularSessionCompleteV1Request','Required parameter requestParameters.elevateRegularSessionCompleteV1Request was null or undefined when calling elevateRegularSessionCompleteV1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["ClientId"] = this.configuration.apiKey("ClientId"); // ClientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["DeviceId"] = this.configuration.apiKey("DeviceId"); // DeviceId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Instant"] = this.configuration.apiKey("Instant"); // Instant authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["SessionId"] = this.configuration.apiKey("SessionId"); // SessionId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["SignedHeaders"] = this.configuration.apiKey("SignedHeaders"); // SignedHeaders authentication
        }

        const response = await this.request({
            path: `/elevate-regular-session-complete-v1`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ElevateRegularSessionCompleteV1RequestToJSON(requestParameters.elevateRegularSessionCompleteV1Request),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Completes an authentication flow for the given email address, based on the Secure Remote Password protocol (version 6a). If successful, the current session was elevated to `PasswordElevatedSession` assurance level.
     * Complete session elevation to PasswordElevatedSession assurance level
     */
    async elevateRegularSessionCompleteV1(requestParameters: SessionMethodsRegularSessionApiElevateRegularSessionCompleteV1Request): Promise<void> {
        await this.elevateRegularSessionCompleteV1Raw(requestParameters);
    }

    /**
     * Initiates the authentication flow for the current user, based on the Secure Remote Password protocol (version 6a).
     * Initiate session elevation to PasswordElevatedSession assurance level
     */
    async elevateRegularSessionInitV1Raw(): Promise<runtime.ApiResponse<ElevateRegularSessionInitV1Response>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["ClientId"] = this.configuration.apiKey("ClientId"); // ClientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["DeviceId"] = this.configuration.apiKey("DeviceId"); // DeviceId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Instant"] = this.configuration.apiKey("Instant"); // Instant authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["SessionId"] = this.configuration.apiKey("SessionId"); // SessionId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["SignedHeaders"] = this.configuration.apiKey("SignedHeaders"); // SignedHeaders authentication
        }

        const response = await this.request({
            path: `/elevate-regular-session-init-v1`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ElevateRegularSessionInitV1ResponseFromJSON(jsonValue));
    }

    /**
     * Initiates the authentication flow for the current user, based on the Secure Remote Password protocol (version 6a).
     * Initiate session elevation to PasswordElevatedSession assurance level
     */
    async elevateRegularSessionInitV1(): Promise<ElevateRegularSessionInitV1Response> {
        const response = await this.elevateRegularSessionInitV1Raw();
        return await response.value();
    }

    /**
     * Logs out the user on the current client device. Deregisters the client device and its session, and revokes request signing and authentication credentials for that client device.
     * Log out from a device
     */
    async logoutV1Raw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["ClientId"] = this.configuration.apiKey("ClientId"); // ClientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["DeviceId"] = this.configuration.apiKey("DeviceId"); // DeviceId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Instant"] = this.configuration.apiKey("Instant"); // Instant authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["SessionId"] = this.configuration.apiKey("SessionId"); // SessionId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["SignedHeaders"] = this.configuration.apiKey("SignedHeaders"); // SignedHeaders authentication
        }

        const response = await this.request({
            path: `/logout-v1`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Logs out the user on the current client device. Deregisters the client device and its session, and revokes request signing and authentication credentials for that client device.
     * Log out from a device
     */
    async logoutV1(): Promise<void> {
        await this.logoutV1Raw();
    }

}
